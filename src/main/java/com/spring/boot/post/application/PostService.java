package com.spring.boot.post.application;import com.spring.boot.common.exception.NotFoundException;import com.spring.boot.common.imageUploader.ImageUploader;import com.spring.boot.post.domain.image.Image;import com.spring.boot.common.imageUploader.UploadFile;import com.spring.boot.member.application.MemberService;import com.spring.boot.member.domain.member.Member;import com.spring.boot.post.domain.Post;import com.spring.boot.post.domain.PostRepository;import com.spring.boot.post.domain.tag.PostTag;import com.spring.boot.post.presentaion.dto.PostCreateRequest;import com.spring.boot.post.presentaion.dto.PostUpdateRequest;import com.spring.boot.tag.application.TagService;import com.spring.boot.tag.domain.Tag;import java.util.Collections;import java.util.List;import java.util.Optional;import java.util.Set;import java.util.stream.Collectors;import org.springframework.security.access.AccessDeniedException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;@Servicepublic class PostService {  private final ImageUploader imageUploader;  private final PostRepository postRepository;  private final TagService tagService;  private final MemberService memberService;  public PostService(ImageUploader imageUploader, PostRepository postRepository,      TagService tagService, MemberService memberService) {    this.imageUploader = imageUploader;    this.postRepository = postRepository;    this.tagService = tagService;    this.memberService = memberService;  }  private Post findByPostId(Long postId) {    return postRepository.findById(postId)        .orElseThrow(() -> new NotFoundException(Post.class, postId));  }  private List<String> uploadAndGetImagePath(List<MultipartFile> multipartFiles) {    if (multipartFiles == null) {      return Collections.emptyList();    }    return multipartFiles.stream()        .map(UploadFile::toUploadFile)        .filter(Optional::isPresent)        .map(Optional::get)        .map(imageUploader::upload)        .collect(Collectors.toList());  }  @Transactional  public Post updatePost(Long writerId, Long postId, PostUpdateRequest postUpdateRequest,      List<MultipartFile> multipartFiles) {    Member writer = memberService.findById(writerId);    Post post = findByPostId(postId);    if (!post.isWrittenBy(writer)) {      throw new AccessDeniedException("접근권한이 없습니다");    }    List<String> imagePaths = uploadAndGetImagePath(multipartFiles);    post.updatePost(postUpdateRequest.getTitle(), postUpdateRequest.getContent(), tagService.createOrGetTags(postUpdateRequest.getTagNames()));    post.initImages(imagePaths);    return post;  }  @Transactional  public Long deletePost(Long writerId, Long postId) {    Member writer = memberService.findById(writerId);    Post post = postRepository.findById(postId)        .orElseThrow(() -> new NotFoundException(Post.class, postId));    if (!post.isWrittenBy(writer)) {      throw new AccessDeniedException("접근권한이 없습니다");    }    postRepository.deleteById(postId);    return postId;  }  @Transactional  public Post createPost(Long writerId, PostCreateRequest postCreateRequest,      List<MultipartFile> multipartFiles) {    Member writer = memberService.findById(writerId);    Post post = new Post(postCreateRequest.getTitle(), postCreateRequest.getContent(), writer);    List<String> imagePaths = uploadAndGetImagePath(multipartFiles);    Set<Tag> tags = tagService.createOrGetTags(postCreateRequest.getTagNames());    post.initImages(imagePaths);    post.initPostTags(tags);    postRepository.save(post);    return post;  }  @Transactional  public Post getPostByPostId(Long postId) {    return postRepository.findByPostIdWithMember(postId).map(post -> {          // todo          for (Image image : post.getImages()) {            image.getId();            break;          }          for (PostTag postTag : post.getPostTags()) {            postTag.getId();            break;          }          return post;        })        .orElseThrow(() -> new NotFoundException(Post.class, "post", postId));  }  @Transactional  public List<Post> getPostByMemberId(Long memberId) {    Member member = memberService.findById(memberId);    List<Post> posts = postRepository.findByMember(member);    // todo    for (Post findPost : posts) {      for (Image image : findPost.getImages()) {        image.getId();        break;      }      for (PostTag postTag : findPost.getPostTags()) {        postTag.getId();        break;      }    }    return posts;  }//  @Transactional(readOnly = true)//  public List<Post> getAllFollowingsPost(Long memberId, Pageable pageable) {//    Member member = memberRepository.findById(memberId)//        .orElseThrow(() -> new NotFoundException(Member.class, memberId));//    List<Post> posts = postRepository.getAllFollowingsPost(member, pageable);//    posts.forEach(post -> {//      post.uploadAndGetImages().stream().findFirst().ifPresent(image -> image.getId());//      post.getTagNames().stream().findFirst().ifPresent(postTag -> postTag.getId());//    });//    return posts;//  }}